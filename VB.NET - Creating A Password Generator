Password generators can come in good use when creating new accounts or maybe updating an existing account's security. In today's day-in-age using the same password and, or even a less complex password can lead to ineffective account security. With the databases breaches of Myspace, Dropbox, and even LinkedIn, it has caused a wave of accounts being compromised on other websites as well. For example, using the same e-mail and password for LinkedIn as you do Netflix, can cause your Netflix account to be compromised. It's always a good rule of thumb to keep passwords complex, easy to remember for you and different for each website.

Which is where creating a password generator of your own can come in handy. For ease of access, you can even place this executable file into your System32 directory. Allowing you to run it using the "Run Dialog" (win+r) with the following command and arguments “passme 42” to generate a 42-character password. We’ll touch more on that later in this tutorial.

The Build


You’ll want to start off by opening Microsoft Visual Studio and creating a new Console Application. A Console Application will not give us an interactive interface, but just a black screen for text to be printed on. Which is perfect for what we’re going to be doing in this tutorial.


You can enter any name you want, but for the purpose of this tutorial I went ahead and put "Password Generator". When you've pressed "OK", you should be presented with the screen below:


Now comes the part you've been waiting for. We're going to be going step-by-step first by importing a namespace that's applied to the top of our Console Application.

Imports System.Text
This will allow us to reference our StringBuilder class without having to do something like "System.Text.StringBuilder" later on in the coding process.


We want to allow a little flexibility when creating this. Perhaps you're not fond of the password that's generated and you want to generate another one; that's not a problem. With the combination of a Do Loop and a Function, this will give us that ability to keep referencing it over and over again throughout the program's execution time. Lets go ahead and put the necessary function below the Module line, but above the Sub line.

Function gen(ByVal i As Integer)
        Dim characters As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz+_)(*&^%$#@!-={}][':;?><,./\|"
        Dim producer As New Random
        Dim collector As New StringBuilder
        For counter As Integer = 1 To i
            Dim supplier As Integer = producer.Next(0, characters.Length)
            collector.Append(characters.Substring(supplier, 1))
        Next
        Return collector.ToString()
End Function

Why don't we take a moment to tear this code up? Learn a little of what's going on.

Function gen(ByVal i As Integer)
Here our function is going to be named "gen" and our "i" parameter is going to be defined as an Integer. Which means that each time we reference or use this function, you need to place an integer into the function for it to return a value currently.

Dim characters As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz+_)(*&^%$#@!-={}][':;?><,./\|"
We need a set of characters for our application to choose from when generating a password. The variable "characters" will be those set of characters this application will get to choose from.

Dim producer As New Random
Our "producer" variable will create a new instance of the Random class. In VB.NET the Random class is a pseudo-random number generator, that will create a sequence of numbers that meet certain requirements for maximum randomness. By itself the randomness is containable, but once given a range it will produce much randomness.

Dim collector As New StringBuilder
The "collector" variable is a much different class. It is in charge of allowing us to take those letters coming from the "characters" variable and putting them into an easy-to-read string later on in our coding process.

For counter As Integer = 1 To i
Earlier in the code we had a parameter, "i", which is now coming into use in this For loop. It does so by letting the For loop know just how far it can loop before going onto the next line of code. For example, the parameter "i" has a value of "4", the For loop will count 1, 2, 3, 4. Usually a For loop will start at "0", but since the "counter" variable is defined as an integer with the value "1" - it will start at "1".

Dim supplier As Integer = producer.Next(0, characters.Length)
The application is now taking the "supplier" variable and using it to store the number needed to select a character from the "characters" variable. You can think of the "supplier" variable as the one supplying our application with its newly found character. This is all done thanks to the "producer" variable in creating a random number between 0 and the length of the "characters" variable (91).

collector.Append(characters.Substring(supplier, 1))
When the "supplier" has our number, the "collector" is going to record this as a single character taken from the "characters" variable. Which is what the "Substring" does, is take a number and fetch that number identifying that character in that string. Lets say you had a string "I3IE" and you wanted "E", you would order the "Substring" to take the fourth letter of the string using the identifying integer "3".

Next
Closing the For loop.

Return collector.ToString()
We've closed the For loop, our function is coming to a close, it's time to return something. We're going to return the "collector's" contents to the procedure of which it was called from "Sub Main".

Great! Our password generator has its core function. We need to setup the "Sub Main" to make use of our newly created function.

Sub Main(ByVal gather() As String)
        Dim length As Integer = 12
        If Not gather.Length = 0 Then
            length = gather(0)
        End If
        Console.WriteLine(gen(length))
        Dim entry = Console.ReadLine()
        Do
            If Console.KeyAvailable Then
                Dim key_info As ConsoleKeyInfo = Console.ReadKey(True)
                If (key_info.Key.Equals(ConsoleKey.Escape)) Then
                    Exit Do
                ElseIf (entry.Equals("cls")) Then
                    Console.Clear()
                    entry = Console.ReadLine()
                Else
                    If Not entry Is Nothing Then
                        Console.WriteLine(gen(entry))
                        entry = Console.ReadLine()
                    Else
                        Exit Do
                    End If
                End If
            End If
        Loop
End Sub

It is much longer than our function. Reason being is that there is a lot more going on. Essentially this code is gathering information and deciding what to do with said information. Earlier in the tutorial, we discussed flexibility, which is exactly what this block of code is doing. If you're not happy with the result it has produced, you can enter in another length you'd like and it will generate you another password. You can even clear the results with "cls" if your screen becomes overwhelming. Exiting is simple by pressing the "escape" key. Lets go ahead and walk through each line of code.

Sub Main(ByVal gather() As String)
The "gather()" is listening for arguments sent to it. If you enter "passme 42", it will grab the "42" and use that as the length.

Dim length As Integer = 12
If a length isn't given to the generator, it will decide for you. This variable is in charge of setting that length.

If Not gather.Length = 0 Then
Reading this simple if then statement, we see the variable "gather" is being tested to see if it holds a value.

length = gather(0)
If "gather" does hold a value, it will instruct the program to change the "length" from "12" to that of which was entered.

End If
To let the program know we're done testing this variable, lets end the if then statement.

Console.WriteLine(gen(length))
Awesome! We have a length that we can send the "gen" function, which will return our newly created password.

Dim entry = Console.ReadLine()
What is there to do next? Our password generator has done its job - we wait of course. This line of code will instruct our application to read the console for anymore further instructions.

Do
Lets start a Do Loop to tell what that input may have been. Whether it is a clear screen command, escape, or to generate another password, this will assist us in determining that. This Do Loop will prevent the application from exiting too.

If Console.KeyAvailable Then
Was a key pressed? That's what the application is asking its self.

Dim key_info As ConsoleKeyInfo = Console.ReadKey(True)
In this "key_info" variable is stored the key's information. If the key was "escape" or "return", this variable will hold that information.

If (key_info.Key.Equals(ConsoleKey.Escape)) Then
Was the key pressed "escape"?

Exit Do
Yes? Lets exit the application.

ElseIf (entry.Equals("cls")) Then
No? Are you wanting to clear the console's content?

Console.Clear()
Yes you are wanting to clear the console's content? Okay.

entry = Console.ReadLine()
Our application will go back to waiting for further input.

Else
Not wanting to escape? Not wanting to clear the screen? You must want to generate another password!

If Not entry Is Nothing Then
Is the input empty or not? The application will generate a password if the input isn't empty.

Console.WriteLine(gen(entry))
Another password is generated and displayed in the console.

entry = Console.ReadLine()
Now the application will wait for further instructions.

Else
If nothing is entered into the console, the application will ask what to do next.

Exit Do
Which is to exit!

Everything therefor after is meant to tie up any loose ends. Ending the previous if then statements, closing the do loop, and ending the "Sub Main". Our next step is to test it out by pressing the green "Start" button or F5 - which ever. A new window should pop up launching your newly created password generator. You can now create different passwords with varying lengths.


System32 Implication

Why not make it easily accessible now? We can by placing it in our System32 directory and launching it from the run dialog. First save your project if you haven't already. You will now build your project by going to Build -> Build Password Generator. Now navigate to your build path which is in "C:\Users\USERNAME\Documents\Visual Studio 2015\Projects\Password Generator\Password Generator\bin\Debug\".


Rename the "Password Generator.exe" to an easy to remember command like "passme.exe".


You can now copy this file into your "C:\Windows\System32\" directory.


You're almost done! Your next step is to test out to see if it works. You can do this by going to your start menu, typing in "Run", and opening that. You can also do WIN+R for ease of access. Once the dialog is open, just type in "passme 42" and hit that return key.


Look at that! You now have a 42 long password at your disposal. You can even request another password by typing in lets say "64" and hitting that return key twice to return a password with the length of 64! Enter "cls" if your screen gets to cluttered. Press escape if you want to exit the application.


That's it folks. Hope you enjoyed the tutorial!

Successful Publication on December 29, 2016 - https://www.linkedin.com/pulse/vbnet-creating-password-generator-james-herrick-1/